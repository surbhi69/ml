import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/LAB 2 DATASET.csv')


df['Chance of Admit '] = [1 if each > 0.75 else 0 for each in df['Chance of Admit ']]


x = df[['GRE Score', 'TOEFL Score', 'University Rating', 'SOP', 'LOR ', 'CGPA',
       'Research']]
y = df['Chance of Admit ']


from sklearn.model_selection import train_test_split
x_train, x_test , y_train, y_test = train_test_split(x,y,test_size=0.25,random_state=1)
print("Size of the Train and Test")
print("X_train : ",x_train.shape)
print("Y_train : ",y_train.shape)
print("X_test  : ",x_test.shape)
print("Y_test  : ",y_test.shape)


from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression

dr = DecisionTreeRegressor(random_state=1)
rf = RandomForestRegressor(random_state=1)
lr = LogisticRegression(random_state=1, max_iter=1000)

dr.fit(x_train, y_train)
rf.fit (x_train, y_train)
lr.fit(x_train, y_train)


y_pred_dr = dr.predict(x_test)
y_pred_rf = rf.predict(x_test)
y_pred_lr = lr.predict(x_test)

y_pred_rf = [1 if each > 0.75 else 0 for each in y_pred_rf]

from sklearn.metrics import ConfusionMatrixDisplay , accuracy_score
from sklearn.metrics import classification_report

sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", mask=np.triu(df.corr()))
plt.show()


plt.style.use('seaborn-white')
plt.figure(figsize = (10,10))
fig = sns.regplot(x="GRE Score", y="TOEFL Score", data=df)
plt.title("GRE Score vs TOEFL Score")

plt.show();



ConfusionMatrixDisplay.from_predictions(y_test,y_pred_dr)
plt.title('Decision Tree')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_dr)}")
print(classification_report(y_test,y_pred_dr))


ConfusionMatrixDisplay.from_predictions(y_test,y_pred_lr)
plt.title('Logistic Regression')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_lr)}")
print(classification_report(y_test,y_pred_lr))


ConfusionMatrixDisplay.from_predictions(y_test,y_pred_rf,xticks_rotation='vertical')
plt.title('Random Forest')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_rf)}")
print(classification_report(y_test,y_pred_rf))
